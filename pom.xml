<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!-- Spring Boot parent configuration -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.5.5</version>
    <relativePath/>
    <!-- lookup parent from repository -->
  </parent>
  <!-- Project information -->
  <groupId>fr.softsf</groupId>
  <artifactId>SudokuFX</artifactId>
  <version>1.0.0</version>
  <name>Sudoku</name>
  <organization>
    <name>Soft64.fr</name>
  </organization>
  <!-- Developer information -->
  <developers>
    <developer>
      <email>soft64.fr@gmail.com</email>
      <roles>
        <role>developer</role>
      </roles>
      <timezone>+1</timezone>
    </developer>
  </developers>
  <!-- Project properties -->
  <properties>
    <deployment-folder>output</deployment-folder>
    <java.version>21</java.version>
    <javafx.version>23.0.2</javafx.version>
    <license.name>MIT</license.name>
    <macos-package-id>fr.soft64.sudokufx</macos-package-id>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.organization>lob2018</sonar.organization>
    <spotless-maven-plugin.skip>false</spotless-maven-plugin.skip>
    <start-class>fr.softsf.sudokufx.Launcher</start-class>
  </properties>
  <!-- Project dependencies -->
  <dependencies>
    <!-- Ignite Spring dependency -->
    <dependency>
      <groupId>com.gluonhq</groupId>
      <artifactId>ignite-spring</artifactId>
      <version>1.2.2</version>
    </dependency>
    <!-- Apache Commons Lang 3 dependency -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.18.0</version>
    </dependency>
    <!-- Flyway database migration dependencies -->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-hsqldb</artifactId>
      <version>11.11.2</version>
    </dependency>
    <!-- HSQLDB database dependency -->
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>2.7.4</version>
      <scope>runtime</scope>
    </dependency>
    <!-- MapStruct used to create DTOs -->
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>1.6.3</version>
    </dependency>
    <!-- JMH measures precise Java performance -->
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>1.37</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <version>1.37</version>
    </dependency>
    <!-- JavaFX dependencies -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-media</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <!-- Passay for password validation -->
    <dependency>
      <groupId>org.passay</groupId>
      <artifactId>passay</artifactId>
      <version>1.6.6</version>
    </dependency>
    <!-- Spring Boot dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <!-- TestFX for JavaFX testing -->
    <dependency>
      <groupId>org.testfx</groupId>
      <artifactId>testfx-junit5</artifactId>
      <version>4.0.18</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <!-- Build configuration -->
  <build>
    <plugins>
      <!--
        Spotless plugin for source file formatting:
        - `ratchetFrom`: Format files based on the reference branch (`origin/main`).
        - `skip`: Skip formatting based on the `spotless-maven-plugin.skip` property.
        - `formats`: Defines format rules for various file types (e.g., `.gitignore`, `.xml`, `.md`, `.yaml`).
        - `pom`: Formats `pom.xml` with indentation, element order, and plugin-specific settings.
        - `java`: Applies `google-java-format` to Java files, with sorting imports and removing unused ones.
        - `sql`: Formats SQL files for Flyway migrations with indentation and whitespace handling.
        - `executions`:
          - `spotless-apply`: Applies formatting during the `validate` phase.
          - `spotless-check`: Checks if files are properly formatted during the `validate` phase.
      -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.46.1</version>
        <configuration>
          <ratchetFrom>NONE</ratchetFrom>
          <skip>${spotless-maven-plugin.skip}</skip>
          <formats>
            <!-- independent formats -->
            <format>
              <!-- define the files to apply to -->
              <includes>
                <include>.gitignore</include>
                <include>jvm.config</include>
                <include>**/*.md</include>
                <include>**/*.xml</include>
                <include>**/*.yaml</include>
                <include>**/*.yml</include>
              </includes>
              <excludes>
                <exclude>pom.xml</exclude>
                <exclude>.flattened-pom.xml</exclude>
                <exclude>**/target/**/*</exclude>
                <exclude>.git/**</exclude>
                <exclude>setup/**</exclude>
              </excludes>
              <!-- steps to apply to those files -->
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>4</spacesPerTab>
              </indent>
            </format>
          </formats>
          <!-- language-specific format -->
          <pom>
            <!-- defaults -->
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom>
              <encoding>UTF-8</encoding>
              <!-- The encoding of the pom files -->
              <lineSeparator>${line.separator}</lineSeparator>
              <!-- line separator to use -->
              <expandEmptyElements>false</expandEmptyElements>
              <!-- Should empty elements be expanded-->
              <spaceBeforeCloseEmptyElement>false</spaceBeforeCloseEmptyElement>
              <!-- Should a space be added inside self-closing elements-->
              <keepBlankLines>true</keepBlankLines>
              <!-- Keep empty lines -->
              <nrOfIndentSpace>2</nrOfIndentSpace>
              <!-- Indentation -->
              <indentBlankLines>false</indentBlankLines>
              <!-- Should empty lines be indented -->
              <indentSchemaLocation>false</indentSchemaLocation>
              <!-- Should schema locations be indended -->
              <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
              <!-- Sort order of elements: https://github.com/Ekryd/sortpom/wiki/PredefinedSortOrderProfiles-->
              <sortOrderFile/>
              <!-- Custom sort order of elements: https://raw.githubusercontent.com/Ekryd/sortpom/master/sorter/src/main/resources/custom_1.xml -->
              <sortDependencies>groupId,artifactId</sortDependencies>
              <!-- Sort dependencies: https://github.com/Ekryd/sortpom/wiki/SortDependencies-->
              <sortDependencyExclusions>groupId,artifactId</sortDependencyExclusions>
              <!-- Sort dependency exclusions: https://github.com/Ekryd/sortpom/wiki/SortDependencies-->
              <sortPlugins>groupId,artifactId</sortPlugins>
              <!-- Sort plugins: https://github.com/Ekryd/sortpom/wiki/SortPlugins -->
              <sortProperties>true</sortProperties>
              <!-- Sort properties -->
              <sortModules>true</sortModules>
              <!-- Sort modules -->
              <sortExecutions>true</sortExecutions>
              <!-- Sort plugin executions -->
            </sortPom>
          </pom>
          <java>
            <!-- Included source folders -->
            <includes>
              <include>src/main/java/**/*.java</include>
              <include>src/test/java/**/*.java</include>
            </includes>
            <!-- Use Google Java Format with AOSP style and string reflow -->
            <googleJavaFormat>
              <version>1.27.0</version>
              <style>AOSP</style>
              <reflowLongStrings>true</reflowLongStrings>
            </googleJavaFormat>
            <!-- Import ordering rules -->
            <importOrder>
              <!-- Place wildcard imports after regular imports -->
              <wildcardsLast>true</wildcardsLast>
              <order>java|javax,org,com,,com.abcdef,\#,\#com.abcdef</order>
              <!-- Use '|' to group without line breaks, empty string for others, '\#' for static imports -->
              <!-- Alternatively: <file>${project.basedir}/eclipse.importorder</file> -->
            </importOrder>
            <!-- Remove unused imports -->
            <removeUnusedImports/>
            <!-- Format Java type annotations consistently -->
            <formatAnnotations/>
            <!-- Insert license header at the top of each file -->
            <licenseHeader>
              <content><![CDATA[
/*
 * SudokuFX - Copyright © 2024-present SOFT64.FR Lob2018
 * Licensed under the MIT License (MIT).
 * See the full license at: https://github.com/Lob2018/SudokuFX?tab=License-1-ov-file#readme
 */
]]></content>
              <!-- Or load from external file: <file>${project.basedir}/license-header</file> -->
            </licenseHeader>
          </java>
          <sql>
            <!-- You have to set the target manually -->
            <includes>
              <include>src/main/resources/fr/softsf/sudokufx/flyway/scripts/hsqldb/migration/**/*.sql</include>
            </includes>
            <trimTrailingWhitespace/>
            <endWithNewline/>
            <indent>
              <spaces>true</spaces>
              <spacesPerTab>4</spacesPerTab>
            </indent>
            <dbeaver>
              <!-- optional -->
            </dbeaver>
          </sql>
        </configuration>
        <executions>
          <!-- Execution to apply formatting on every build -->
          <execution>
            <id>spotless-apply</id>
            <goals>
              <goal>apply</goal>
            </goals>
            <phase>validate</phase>
          </execution>
          <!-- Execution to check if formatting is correct -->
          <execution>
            <id>spotless-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>
      <!-- Maven Checkstyle Plugin for static code analysis -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <!-- Path to your custom checkstyle.xml configuration file -->
          <configLocation>checkstyle.xml</configLocation>
          <!-- Optional: suppressions file if needed -->
          <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
          <!-- Fail the build on violations -->
          <failsOnError>true</failsOnError>
          <!-- Enable console output -->
          <consoleOutput>true</consoleOutput>
          <!-- Minimum severity level that fails the build -->
          <violationSeverity>error</violationSeverity>
        </configuration>
        <dependencies>
          <!-- Use a specific version of Checkstyle (must match your checkstyle.xml DTD) -->
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>11.0.1</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>validate</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>
      <!-- Java compiler plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.14.0</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <excludes>
            <exclude>fr/softsf/sudokufx/benchmark/**/*.java</exclude>
          </excludes>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>1.6.3</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <!-- Maven Enforcer Plugin to define the minimum Maven version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.6.1</version>
        <executions>
          <execution>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.version}</version>
                  <message>The version of Maven must be at least ${maven.version}. Please update your Maven installation.</message>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Surefire plugin for running tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.5.3</version>
        <configuration>
          <argLine>@{jacoco.argLine} -Dapp.name=${project.artifactId} -Dapp.version=${project.version} -Dapp.organization=${project.organization.name} -Dapp.license=${license.name} -XX:+EnableDynamicAgentLoading -Xshare:off</argLine>
        </configuration>
      </plugin>
      <!-- JaCoCo plugin for code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.13</version>
        <configuration>
          <excludes>
            <exclude>fr/softsf/sudokufx/SudoMain*</exclude>
            <exclude>fr/softsf/sudokufx/Launcher.class</exclude>
            <exclude>fr/softsf/sudokufx/view/**</exclude>
            <exclude>fr/softsf/sudokufx/dto/**</exclude>
            <exclude>fr/softsf/sudokufx/common/interfaces/**</exclude>
            <exclude>fr/softsf/sudokufx/common/util/SpringContextInitializer$*</exclude>
            <exclude>fr/softsf/sudokufx/benchmark/**</exclude>
            <exclude>fr/softsf/sudokufx/viewmodel/MenuOptionsViewModel$*</exclude>
            <exclude>fr/softsf/sudokufx/service/ui/AsyncFileProcessorService$*</exclude>
            <exclude>fr/softsf/sudokufx/service/external/VersionService$*</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <propertyName>jacoco.argLine</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.8</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- JavaFX Maven plugin -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <jlinkVerbose>true</jlinkVerbose>
          <mainClass>${start-class}</mainClass>
          <options>
            <option>-Dapp.name=${project.artifactId}</option>
            <option>-Dapp.version=${project.version}</option>
            <option>-Dapp.organization=${project.organization.name}</option>
            <option>-Dapp.license=${license.name}</option>
          </options>
        </configuration>
      </plugin>
      <!-- Spring Boot Maven Plugin for uberjar -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>${start-class}</mainClass>
          <jvmArguments>
            <jvmArgument>-Dapp.name=${project.artifactId}</jvmArgument>
            <jvmArgument>-Dapp.version=${project.version}</jvmArgument>
            <jvmArgument>-Dapp.organization=${project.organization.name}</jvmArgument>
            <jvmArgument>-Dapp.license=${license.name}</jvmArgument>
          </jvmArguments>
          <excludeGroupIds>org.openjdk.jmh</excludeGroupIds>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <!-- Exec plugin to generate JMH benchmarks for id:jmh (see the README for instructions) -->
    <profile>
      <id>jmh</id>
      <build>
        <plugins>
          <!-- Compilation with JMH processors -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.14.0</version>
            <configuration>
              <annotationProcessorPaths>
                <path>
                  <groupId>org.mapstruct</groupId>
                  <artifactId>mapstruct-processor</artifactId>
                  <version>1.6.3</version>
                </path>
                <path>
                  <groupId>org.openjdk.jmh</groupId>
                  <artifactId>jmh-generator-annprocess</artifactId>
                  <version>1.37</version>
                </path>
              </annotationProcessorPaths>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- Exec plugin to generate Doxygen documentation and LICENSE.txt suitable for id:generate-docs-windows and id:generate-docs-unix -->
    <profile>
      <id>generate-docs-windows</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <id>exec-generate-doxygen-docs</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>doxygen</executable>
                  <arguments>
                    <argument>Doxyfile</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>exec-generate-third-party</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>mvn</executable>
                  <arguments>
                    <argument>license:add-third-party</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>exec-git-add-all</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>git</executable>
                  <arguments>
                    <argument>add</argument>
                    <argument>-A</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>merge-license-files-windows</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>cmd</executable>
                  <arguments>
                    <argument>/c</argument>
                    <argument>.myresources\scripts\windowsLicense.bat</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>generate-docs-unix</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <id>exec-generate-doxygen-docs</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>doxygen</executable>
                  <arguments>
                    <argument>Doxyfile</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>exec-generate-third-party</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>mvn</executable>
                  <arguments>
                    <argument>license:add-third-party</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>exec-git-add-all</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>git</executable>
                  <arguments>
                    <argument>add</argument>
                    <argument>-A</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>merge-license-files-unix</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>prepare-package</phase>
                <configuration>
                  <executable>bash</executable>
                  <arguments>
                    <argument>.myresources/scripts/unixLicense.sh</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- Exec plugin for running external scripts for RELEASES, suitable for id:windows, id:linux, id:mac operating systems -->
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <!-- Windows package using batch script -->
                <id>exec-batch</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <executable>cmd</executable>
                  <arguments>
                    <argument>/c</argument>
                    <argument>.myresources\scripts\windowsRelease.bat</argument>
                    <argument>${project.artifactId}</argument>
                    <argument>${project.version}</argument>
                    <argument>${project.organization.name}</argument>
                    <!-- The main module to execute -->
                    <argument>${start-class}</argument>
                    <argument>${java.version}</argument>
                    <argument>${deployment-folder}</argument>
                    <argument>${maven.build.timestamp}</argument>
                    <argument>${project.organization.name}</argument>
                    <argument>${license.name}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <family>linux</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <!-- Linux package using shell script -->
                <id>exec-linux-shell</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <executable>bash</executable>
                  <arguments>
                    <argument>.myresources/scripts/linuxRelease.sh</argument>
                    <argument>${project.artifactId}</argument>
                    <argument>${project.version}</argument>
                    <argument>${project.organization.name}</argument>
                    <!-- The main module to execute -->
                    <argument>${start-class}</argument>
                    <argument>${java.version}</argument>
                    <argument>${deployment-folder}</argument>
                    <argument>${project.organization.name}</argument>
                    <argument>${license.name}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
          <arch>aarch64</arch>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <!-- macOS package using shell script -->
                <id>exec-macos-shell</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <executable>bash</executable>
                  <arguments>
                    <argument>.myresources/scripts/macosRelease.sh</argument>
                    <argument>${project.artifactId}</argument>
                    <argument>${project.version}</argument>
                    <argument>${project.organization.name}</argument>
                    <!-- The main module to execute -->
                    <argument>${start-class}</argument>
                    <argument>${java.version}</argument>
                    <argument>${deployment-folder}</argument>
                    <argument>${macos-package-id}</argument>
                    <argument>${project.organization.name}</argument>
                    <argument>${license.name}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>mac-x86_64</id>
      <activation>
        <os>
          <family>mac</family>
          <arch>x86_64</arch>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.1</version>
            <executions>
              <execution>
                <!-- macOS package using shell script for x86_64 -->
                <id>exec-macos-x86_64-shell</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <executable>bash</executable>
                  <arguments>
                    <argument>.myresources/scripts/macosRelease-x86_64.sh</argument>
                    <argument>${project.artifactId}</argument>
                    <argument>${project.version}</argument>
                    <argument>${project.organization.name}</argument>
                    <!-- The main module to execute -->
                    <argument>${start-class}</argument>
                    <argument>${java.version}</argument>
                    <argument>${deployment-folder}</argument>
                    <argument>${macos-package-id}</argument>
                    <argument>${project.organization.name}</argument>
                    <argument>${license.name}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
