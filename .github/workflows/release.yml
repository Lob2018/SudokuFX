name: "Analysis with SonarCloud and package for Windows, Linux, MacOS"

on:
  push:
    branches: [ "main" ]

permissions: # added using https://github.com/step-security/secure-repo
  contents: read

jobs:
  package_for_linux:
    name: Package for Linux and Analyze with SonarCloud
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: sudo apt-get install -y xvfb
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, Package, and analyze with Maven profile (Linux)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Hide sensitive data for the step
          echo "::add-mask::$GITHUB_TOKEN"
          echo "::add-mask::$SONAR_TOKEN"
          # Compile, Test, Package, and analyze
          mvn -B package -P linux -f pom.xml \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=Lob2018_SudoFX2024 \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - name: Upload output folder (Linux)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: output-folder-linux
          path: output

  package_for_windows:
    name: Package for Windows
    needs: [ package_for_linux ]
    runs-on: windows-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'

      - name: Verify Java Installation
        run: java -version
        shell: cmd

      - name: Cache WiX Toolset
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: wix311.exe
          key: ${{ runner.os }}-wix311

      - name: Install WiX Toolset
        run: |
          if (!(Test-Path wix311.exe)) {
              Write-Host "wix311.exe is downloaded."
              $url = 'https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe'
              $output = 'wix311.exe'
              Invoke-WebRequest -Uri $url -OutFile $output
              Start-Process -FilePath $output -ArgumentList '/quiet' -Wait -NoNewWindow
          } else {
              Write-Host "wix311.exe is in the cache."
          }

      - name: Add WiX Toolset to PATH
        run: |
          $newPath = 'C:\Program Files (x86)\WiX Toolset v3.11\bin'
          $currentPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine')
          [Environment]::SetEnvironmentVariable('PATH', "$newPath;$currentPath", 'Machine')

      - name: Compile, Test, and Package with Maven
        run: mvn package -f pom.xml

      - name: Upload output folder
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: output-folder-windows
          path: output

  package_for_macos:
    name: Package for MacOS
    needs: [ package_for_linux ]
    runs-on: macos-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: brew install XQuartz
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, and Package with Maven (macOS)
        run: mvn package -P mac -f pom.xml
      - name: Upload output folder (macOS)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: output-folder-macos
          path: output

  package_for_macos_x86_64:
    name: Package for MacOS x86_64
    needs: [ package_for_linux ]
    runs-on: macos-13
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: brew install XQuartz
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, and Package with Maven (macOS)
        run: mvn package -P mac-x86_64 -f pom.xml
      - name: Upload output folder (macOS-x86_64)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: output-folder-macos-x86_64
          path: output

  publish_release:
    permissions:
      contents: write  # for ncipollo/release-action to create a release
    name: Publish the release and tag it
    needs: [ package_for_windows, package_for_linux, package_for_macos, package_for_macos_x86_64 ]
    runs-on: ubuntu-latest
    env:
      GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Extract version
        run: echo "POM_VERSION=$(awk '/<parent>/,/<\/parent>/ {next} /<version>/ {gsub(/.*<version>|<\/version>.*/, ""); print; exit}' pom.xml)" >> $GITHUB_ENV
      - name: Download output folder (Windows)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: output-folder-windows
          path: output
      - name: Download output folder (Linux)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: output-folder-linux
          path: output
      - name: Download output folder (MacOS)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: output-folder-macos
          path: output
      - name: Download output folder (MacOS-x86_64)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: output-folder-macos-x86_64
          path: output

      - name: GPG - Import private key using an isolated configuration
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          # Hide sensitive data for the step
          echo "::add-mask::$GPG_PRIVATE_KEY"
          # Create a temporary GPG home directory
          export GNUPGHOME=$(mktemp -d)
          chmod 700 $GNUPGHOME
          # Import the private key
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          # Configure temporary GPG agent
          echo "allow-loopback-pinentry" > $GNUPGHOME/gpg-agent.conf
          gpgconf --homedir $GNUPGHOME --reload gpg-agent
          # Export GNUPGHOME for reuse in subsequent steps
          echo "GNUPGHOME=$GNUPGHOME" >> $GITHUB_ENV
      - name: GPG - Sign and verify files (excluding .txt)
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Hide sensitive data for the step
          echo "::add-mask::$GPG_PASSPHRASE"
          # Sign and verify
          export GPG_TTY=$(tty)
          for file in output/*; do
            if [[ ! $file == *.txt ]]; then
              echo "Signing file: $file"
              gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --detach-sign --armor -o "$file.asc" "$file"
              if [[ $? -ne 0 ]]; then
                echo "GPG signing failed for file: $file"
                exit 1
              fi
              echo "Verifying signature for file: $file.asc"
              gpg --verify "$file.asc" "$file"
              if [[ $? -ne 0 ]]; then
                echo "GPG verification failed for file: $file"
                exit 1
              fi
            fi
          done
      - name: GPG - Clean up GNUPGHOME
        run: rm -rf $GNUPGHOME
      - name: GPG - Export public key from secrets and save to output
        run: |
          mkdir -p output
          echo "$GPG_PUBLIC_KEY" > output/sudokufx-public-key.asc

      - name: Create Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          name: SudokuFX release v${{ env.POM_VERSION }}
          tag: v${{ env.POM_VERSION }}
          body: |
            ## MSI, DMG, and DEB Files

            **These installation packages include the Java Runtime Environment (JRE) and will automatically install the application on your machine**

            ### File names

            - **Windows MSI**:`SudokuFX_JVM-${{ env.POM_VERSION }}.msi`
            - **Linux DEB**:`sudokufx-jvm_${{ env.POM_VERSION }}_amd64.deb`
            - **macOS DMG**:`SudokuFX-JVM-${{ env.POM_VERSION }}.dmg` or `SudokuFX-x86_64-JVM-${{ env.POM_VERSION }}.dmg`<br>

            ### File links

            &nbsp;&nbsp;&nbsp;&nbsp;[![Windows MSI](https://img.shields.io/badge/Windows_MSI-SudokuFX__JVM--${{ env.POM_VERSION }}.msi-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX_JVM-${{ env.POM_VERSION }}.msi)
            &nbsp;&nbsp;&nbsp;&nbsp;[![Linux DEB](https://img.shields.io/badge/Linux_DEB-sudokufx--jvm__${{ env.POM_VERSION }}__amd64.deb-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/sudokufx-jvm_${{ env.POM_VERSION }}_amd64.deb)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS DMG](https://img.shields.io/badge/macOS_DMG-SudokuFX--JVM--${{ env.POM_VERSION }}.dmg-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-JVM-${{ env.POM_VERSION }}.dmg)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS DMG x86_64](https://img.shields.io/badge/macOS_DMG_x86__64-SudokuFX--x86__64--JVM--${{ env.POM_VERSION }}.dmg-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-x86_64-JVM-${{ env.POM_VERSION }}.dmg)<br>

            ## Windows, macOS, and Linux ZIP/TAR Files

            **These compressed files do not include the Java Runtime Environment (JRE)**
            **Ensure you have the latest [Adoptium Temurin JRE](https://adoptium.net/temurin/releases/?package=jre) installed and the `JAVA_HOME` environment variable properly configured on your machine.**
            **To launch the application, use the corresponding script**

            ### File names

            - **Windows**:`SudokuFX-${{ env.POM_VERSION }}_windows.zip` (launch with the .bat file)
            - **Linux**:`SudokuFX-${{ env.POM_VERSION }}_linux.tar.gz` (launch with the .sh file)
            - **macOS**:`SudokuFX-${{ env.POM_VERSION }}_macos.zip` or `SudokuFX-${{ env.POM_VERSION }}-x86_64_macos.zip` (launch with the .sh file)<br>

            ### File links

            &nbsp;&nbsp;&nbsp;&nbsp;[![Windows ZIP](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__windows.zip-Launch_with_the_.bat_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_windows.zip)
            &nbsp;&nbsp;&nbsp;&nbsp;[![Linux TAR](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__linux.tar.gz-Launch_with_the_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_linux.tar.gz)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS ZIP](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__macos.zip-Launch_with_the_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_macos.zip)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS ZIP x86_64](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}--x86__64__macos.zip-Launch_with_the_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}-x86_64_macos.zip)<br>

            ## File integrity verification with GPG Signatures

            **To ensure the integrity of downloaded files, verify their signatures using the corresponding GPG public key**

            ### Link to GPG public key

            &nbsp;&nbsp;&nbsp;&nbsp;[![Public GPG (GNU Privacy Guard)](https://img.shields.io/badge/Public_GPG-sudokufx--public--key.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/sudokufx-public-key.asc)<br>

            ### Links to available GPG signatures

            &nbsp;&nbsp;&nbsp;&nbsp;[![Windows MSI GPG (GNU Privacy Guard)](https://img.shields.io/badge/Windows_MSI_GPG-SudokuFX__JVM--${{ env.POM_VERSION }}.msi.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX_JVM-${{ env.POM_VERSION }}.msi.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![Linux DEB GPG (GNU Privacy Guard)](https://img.shields.io/badge/Linux_DEB_GPG-sudokufx--jvm__${{ env.POM_VERSION }}__amd64.deb.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/sudokufx-jvm_${{ env.POM_VERSION }}_amd64.deb.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS DMG GPG (GNU Privacy Guard)](https://img.shields.io/badge/macOS_DMG_GPG-SudokuFX--JVM--${{ env.POM_VERSION }}.dmg.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-JVM-${{ env.POM_VERSION }}.dmg.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS DMG x86_64 GPG (GNU Privacy Guard)](https://img.shields.io/badge/macOS_DMG_x86__64_GPG-SudokuFX--x86__64--JVM--${{ env.POM_VERSION }}.dmg.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-x86_64-JVM-${{ env.POM_VERSION }}.dmg.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![Windows ZIP GPG (GNU Privacy Guard)](https://img.shields.io/badge/Windows_ZIP_GPG-SudokuFX--${{ env.POM_VERSION }}__windows.zip.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_windows.zip.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![Linux TAR GPG (GNU Privacy Guard)](https://img.shields.io/badge/Linux_TAR_GPG-SudokuFX--${{ env.POM_VERSION }}__linux.tar.gz.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_linux.tar.gz.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS ZIP GPG (GNU Privacy Guard)](https://img.shields.io/badge/Macos_ZIP_GPG-SudokuFX--${{ env.POM_VERSION }}__macos.zip.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_macos.zip.asc)
            &nbsp;&nbsp;&nbsp;&nbsp;[![macOS ZIP x86_64 GPG (GNU Privacy Guard)](https://img.shields.io/badge/x86__64__macos_ZIP_GPG-SudokuFX--${{ env.POM_VERSION }}--x86__64__macos.zip.asc-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}-x86_64_macos.zip.asc)<br>

            ## File fingerprints

            **The integrity of the downloaded files can be verified using the corresponding hash files**

            ### File names

            - `hash_windows.txt` (for Windows)
            - `hash_linux.txt` (for Linux)
            - `hash_macos.txt` or `hash_macos-x86_64.txt` (for macOS)<br>

            ### File links

            &nbsp;&nbsp;&nbsp;&nbsp;[![hash_windows.txt](https://img.shields.io/badge/hash__windows.txt-(for_Windows)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_windows.txt)
            &nbsp;&nbsp;&nbsp;&nbsp;[![hash_linux.txt](https://img.shields.io/badge/hash__linux.txt-(for_Linux)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_linux.txt)
            &nbsp;&nbsp;&nbsp;&nbsp;[![hash_macos.txt](https://img.shields.io/badge/hash__macos.txt-(for_macOS)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_macos.txt)
            &nbsp;&nbsp;&nbsp;&nbsp;[![hash_macos-x86_64.txt](https://img.shields.io/badge/hash__macos--x86__64.txt-(for_macOS_x86__64)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_macos-x86_64.txt)

          artifacts: 'output/*'
      - name: Create Tag
        run: git tag v${{ env.POM_VERSION }}
      - name: Push Tag
        run: git push --tags

      - name: Delete all artifacts and output folder after publishing
        uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b
        with:
          name: |
            output-folder-*
      - name: Remove output directory
        run: rm -rf output
